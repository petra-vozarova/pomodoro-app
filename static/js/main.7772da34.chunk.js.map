{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["curTime","timeToPass","setTime","Animations","props","this","status","play","length","lenId","console","log","class","style","React","Component","Date","getSeconds","getMinutes","TimerType","id","title","minId","onClick","value","number","addId","App","state","break","session","timer","type","animationDuration","changeBreakTime","bind","changeSessionTime","changeTime","countDown","checks","timerOnClick","calculatingTime","resetTimer","timerType","setState","document","body","animationPlayState","setInterval","e","currentTime","currentTarget","minutes","Math","floor","seconds","getElementById","pause","src","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.7772da34.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nclass Animations extends React.Component{\n  constructor(props){\n  super(props)\n  }\n\n  render(){\n    if (this.props.status === 'on'){\n      var play = \"running\";\n    } else {\n      play = 'paused';\n    }\n    \n    const length = this.props.lenId;\n    console.log(length + 'length of animation');\n    const duration = 60;\n    return(\n      <div class='sun' style={{\"animation-name\": \"sunRising\", \"animation-duration\": length+\"s\", \"animation-iteration-count\": \"\", \"animation-play-state\": play }}></div> \n    )\n  }\n}\n\n\nconsole.log(new Date().getSeconds() + new Date().getMinutes()*60);\nvar timeAfterPause;\nvar curTime;\nvar timeToPass;\nvar setTime;\nclass TimerType extends React.Component{\n  constructor(props){\n    super(props)\n  }\n  render(){\n    return(\n      <div id={this.props.id}>\n        <h2 id={this.props.title}>{this.props.id}</h2>\n        <span>\n          <button id={this.props.minId} onClick={this.props.onClick} value='subtract'>\n              <i class='fa fa-arrow-down fa-3x'/>\n          </button>\n          <div id={this.props.lenId}>{this.props.number}</div>\n          <button id={this.props.addId} value='add' onClick={this.props.onClick}>\n            <i class='fa fa-arrow-up fa-3x'/>\n          </button>\n        </span>\n        \n      </div>\n    )\n  }\n}\n\nclass App extends React.Component{\n  constructor(props){\n    super(props)\n    this.state = {\n      break: 5,\n      session: 25,\n      timer: 60,\n      status: 'off',\n      type: 'session',\n      id:'',\n      animationDuration: 1500\n    }\n    \n    this.changeBreakTime= this.changeBreakTime.bind(this)\n    this.changeSessionTime= this.changeSessionTime.bind(this)\n    this.timer = this.timer.bind(this)\n    this.changeTime =this.changeTime.bind(this)\n    this.countDown = this.countDown.bind(this)\n    this.checks = this.checks.bind(this)\n    this.timerOnClick = this.timerOnClick.bind(this)\n    this.calculatingTime= this.calculatingTime.bind(this)\n    this.resetTimer = this.resetTimer.bind(this)\n    this.play = this.play.bind(this)\n    this.timerType = this.timerType.bind(this)\n  }\n\n  timerOnClick(){\n  let a = this.state.status == 'off' ?\n      (timeToPass= \n        this.setState({\n        status: 'on',\n        animationDuration: this.state.timer\n        }),\n        document.body.style.animationDuration = this.state.animationDuration+'s',\n        document.body.style.animationPlayState='running',\n      console.log('it works'),\n      this.timer()\n      ):\n      (this.setState({\n        status: 'off',\n        }),\n      document.body.style.animationPlayState='paused'\n      );\n  }\n\n  timer(){\n    curTime = new Date().getSeconds() + new Date().getMinutes()*60;\n    timeToPass = curTime + this.state.timer\n    var a =  setInterval(()=>{\n              if(this.state.status =='on'){\n                this.countDown();\n                this.checks()\n              }\n            }, \n            1000)\n    }\n\n  countDown(){\n    setTime = timeToPass - (new Date().getSeconds() + new Date().getMinutes()*60);\n    //console.log(setTime + ' time set on a timer')\n    this.setState({\n      timer: setTime\n    })  \n  }\n\n  checks(){\n    if(setTime < 0){\n      //document.getElementById('beep').play()\n      if (this.state.type === 'session') {\n        this.timerType('break', this.state.break*60);\n        this.timer();\n      } else{\n        this.timerType('session', this.state.session*60);\n        this.timer();\n      }\n    }\n  }\n  \n  timerType(type, value){\n    this.setState({\n      type: type,\n      timer: value,\n      animationDuration: value\n    })\n  }\n\n  changeBreakTime(e){\n    let currentTime= this.state.break;\n    this.changeTime('break', e.currentTarget.value, currentTime)\n  }\n\n  changeSessionTime(e){\n    let currentTime = this.state.session;\n    this.changeTime('session', e.currentTarget.value, currentTime)\n  }\n\n  changeTime(state, value, currentTime){\n    if (this.state.status === 'off') {\n      if(value === 'add'){\n        if (currentTime < 60){\n          this.setState({\n            [state]: currentTime +1,\n          });\n          if(state ==='session'){\n            this.setState({\n              timer: this.state.timer + 60\n            })\n          }\n        }\n      }\n      if(value ==='subtract'){\n        if (currentTime >= 2){\n          this.setState({\n            [state]: currentTime -1\n          })\n          if (state ==='session'){\n            this.setState({\n              timer: this.state.timer - 60\n            })\n          }\n        }\n      }\n    }\n  }\n\n  calculatingTime(){\n    let minutes = Math.floor(this.state.timer/60);\n    let seconds = Math.floor(this.state.timer%60);\n    if(minutes == 0 && seconds == 0){\n      this.play()\n    }\n    if(minutes < 10) {\n      minutes = '0' + minutes};\n    if (seconds < 10) {\n      seconds = '0'+ seconds\n    } \n\n    return minutes + ':' + seconds\n  }\n\n  play(){\n    var audio = document.getElementById('beep');\n    audio.play()\n  }\n\n  resetTimer(){\n    //clearInterval(this.state.id)\n    this.setState({\n      timer: 1500,\n      session: 25,\n      break: 5,\n      type: 'session',\n      status: 'off',\n      id:'',\n      animationDuration: 1500\n    });\n    document.getElementById('beep').pause();\n    document.getElementById('beep').currentTime = 0;\n  }\n\n  render(){\n    return(\n      <div id ='container'>\n          <Animations title={this.state.type} lenId={this.state.animationDuration} status={this.state.status}/>\n          <div class='cloud'/>\n          <h1>Pomodoro Clock</h1>\n          <div id='display'>\n            <div id='setter'>\n              <TimerType id='break' title='break-label' minId='break-decrement' addId='break-increment' lenId='break-length' number={this.state.break} onClick={this.changeBreakTime}/>\n\n              <TimerType id='session' title='session-label' minId='session-decrement' addId='session-increment' lenId='session-length' number={this.state.session} onClick={this.changeSessionTime}/>\n            </div>\n            <div id='timer'>\n\n              <h2 id='timer-label'>{this.state.type}</h2>\n              <p id='time-left'>{this.calculatingTime()}\n                <audio src='https://sampleswap.org/samples-ghost/VOCALS%20and%20SPOKEN%20WORD/FEMALE%20SINGING/159[kb]get_up_and_dance.aif.mp3' id='break-clip'></audio>\n                <audio id='beep' src='https://sampleswap.org/samples-ghost/MELODIC%20SAMPLES/SAMPLED%20MUSIC/1722[kb]bonanza-western-horse-whinny.wav.mp3'\n  />            </p>\n              <div id='buttons'>\n\n                <button id ='start_stop' onClick={this.timerOnClick}>\n                  <i class='fa fa-play fa-3x'/>\n                  <i class='fa fa-stop fa-3x'/>\n                </button>\n\n                <button id='reset' onClick={this.resetTimer}>\n                  <i class= 'fa fa-refresh fa-2x'/>\n                </button>\n              </div>\n            </div>\n\n          </div>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}